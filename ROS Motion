-------------------------------------------------------------------------------------------

	Turtlesim Cleaner Application

-------------------------------------------------------------------------------------------
- Idea is to make the coverage of certain area and this can be in different ways, i.e rectangular movement, spiral, etc.
- There are various generalised functions that can be listed for any cleaning application,

	void move(double speed, double distance, bool isForward);

	void rotate(doube angular_speed, double angle, bool clockwise);

	doube degrees2radians(double angle_in_degrees);

	void poseCallback(const turtlesim::Pose::ConstPtr & pose_message);

	double setAbsoluteOrientation(doube desired_angle);

	// double clean();

	double getDistance(double x1, double y1, double x2, double y2);

	// void moveGoal(turtlesim::Pose goal_pose, double distance_tolerance);
	
- create a `turtlesim_cleaner` package inside the workspace.
	
	agv@AT:~/catkin_ws/src $ catkin_create_pkg turtlesim_cleaner 
	agv@AT:~/catkin_ws $ catkin_make
	// create a src folder inside the package.
	// create a file `robot_cleaner.cpp` inside the src.


-------------------------------------------------------------------------------------------

	Moving in a Straight line

-------------------------------------------------------------------------------------------

//------------------------ robot_cleaner.cpp

#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
ros::Publisher velocity_publisher;	

using namespace std;
// method to move the robot straight
void move(double speed, double distance, bool isForward);

int main(int argc, char **argv)
{
	ros::init(argc,argv,"robot_cleaner");
	ros::NodeHandle n;
	
	double speed, distance;
	bool isForward;

	velocity_publisher = n.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel",10);
	cout << "enter speed :";
	cin >> speed;
	cout << "enter distance :";
	cin >> distance;
	cout << "enter isForward :";
	cin >> isForward;
	
	move(speed, distance, isForward);

}

void move(double speed, double distance, bool isForward){
	geometry_msgs::Twist vel_msg;

	if(isForward)
		vel_msg.linear.x = abs(speed);
	else
		vel_msg.linear.x = -abs(speed);
	vel_msg.linear.y = 0;
	vel_msg.linear.z = 0;
	
	vel_msg.angular.x = 0;
	vel_msg.angular.y = 0;
	vel_msg.angular.z = 0;

	double t0 = ros::Time::now().toSec();
	double current_distance = 0;
	ros::Rate loop_rate(10); //10 message per second
	
	do{
		velocity_publisher.publish(vel_msg);
		double t1 = ros::Time::now().toSec();
		current_distance = speed * (t1-t0);
		ros::spinOnce();
		loop_rate.sleep();

	}while(current_distance < distance);

	//after a distance is reached
	vel_msg.linear.x = 0;
	velocity_publisher.publish(vel_msg);

}

//---- add all the dependencies in the 'CMakelists.txt' &

find_package(catkin REQUIRED COMPONENTS
  	roscpp
	rospy
	std_msgs
	geometry_msgs
	message_generation
)

catkin_package(

  LIBRARIES turtlesim_cleaner
  CATKIN_DEPENDS roscpp rospy std_msgs geometry_msgs message_runtime

)

include_directories(
 ${catkin_INCLUDE_DIRS}              //inorder to have all catkin header files 
) 

add_executable(robot_cleaner_node src/robot_cleaner.cpp)
target_link_libraries(robot_cleaner_node ${catkin_LIBRARIES})
add_dependencies(robot_cleaner_node turtlesim_cleaner_gencpp)



//---- `package.xml`.

<buildtool_depend>catkin</buildtool_depend>

  <build_depend>roscpp</build_depend>
  <build_depend>rospy</build_depend>
  <build_depend>std_msgs</build_depend>
  <build_depend>geometry_msgs</build_depend>
  <build_depend>message_generation</build_depend>

  <exec_depend>roscpp</exec_depend>                        // <run_depend>..</run_depend> if package format !=2
  <exec_depend>rospy</exec_depend>
  <exec_depend>std_msgs</exec_depend>
  <exec_depend>geometry_msgs</exec_depend>
  <exec_depend>message_runtime</exec_depend>
  

-------------------------------------------------------------------------------------------

	Rotate Left and Right

-------------------------------------------------------------------------------------------

//------------------------addition to : robot_cleaner.cpp

#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include "turtlesim/Pose.h"         //rostopic list after running turtlesim_node --> rostopic info /turtle1/pose --> Type
#include <sstream>

using namespace std;

ros::Publisher velocity_publisher;
ros::Subscriber pose_subscriber;    //turtlesim_node publishes pose by default
turtlesim::Pose turtlesim_pose;	

const double PI = 3.14159265359;

// Note : in turtlesim the head of the turtle is the x-direction.

void rotate(double angular_speed, double angle, bool clockwise);
//angles are passed in radians

double degrees2radians(double angle_in_degrees);
double setDesiredOrientation(double desired_angle_radians);
void poseCalback(const turtlesim::Pose::ConstPtr & pose_message);

int main(int argc, char **argv)
{
	ros::init(argc,argv,"robot_cleaner");
	ros::NodeHandle n;

	velocity_publisher = n.advertise<geometry_msgs::Twist>('/turtle1/cmd_vel',10);
	pose_subscriber = n.subscribe("/turtle1/pose",10,poseCallback);	
	
	ros::Rate loop_rate(10);

	double angular_speed, angle;  //angular_speed -> in rad/s , angle in rad
	bool clockwise;

	'''
	cout >> "enter angular velocity (degree/second) :";
	cin << angular_speed;
	cout >> "enter desired angle (degrees) :";
	cin << angle;
	cout >> "clockwise ? :";
	cin << cockwise;

	rotate(degrees2radians(angular_speed), degrees2radians(angle), clockwise);
	'''

	//or

	'''
	setDesiredOrientation(degrees2radians(120));
	ros::Rate loop_rate(0.5);
	loop_rate.sleep();
	setDesiredOrientation(degrees2radians(-60));
	loop_rate.sleep();
	setDesiredOrientation(degrees2radians(0));
	'''

	ros.spin();
	return 0;
	
}

void rotate(double angular_speed, double relative_angle, bool clockwise)
{
	geometry_msgs::Twist vel_msg;

	vel_msg.linear.x = 0;
	vel_msg.linear.y = 0;
	vel_msg.linear.z = 0;
	
	vel_msg.angular.x = 0;
	vel_msg.angular.y = 0;
	
	if(clockwise)
		vel_msg.angular.z = -abs(angular_speed);
	else:
		vel_msg.angular.z = abs(angular_speed);

	double current_angle = 0;
	double t0 = ros::Time::now().toSec();	
	ros::Rate loop_rate(10);

	do{
		velocity_publisher.publish(vel_msg);
		double t1 = ros::Time::now().toSec();
		current_angle = angular_speed * (t1-t0);
		ros::spinOnce();
		loop_rate.sleep();	
		
	}while(current_angle < relative_angle);

	vel_msg.angular.z = 0;
	velocity_publisher.publish(vel_msg);	
}

double degrees2radians(double angle_in_degrees)
{
	return angle_in_degrees * PI /180.0;
}

double setDesiredOrientation(double desired_angle_radians)
{
	relative_angle_radians = desired_angle_radians - turtlesim_pose.theta;
	bool clockwise = ((relative_angle<0)?true:false);
	cout << desired_angle_radians <<","<<turtlesim_pose.theta<<","<<relative_angle_radians<<","
	rotate(abs(relative_angle_radians),abs(relative_angle_radians),clockwise);
}

void poseCallback(const turtlesim::Pose::ConstPtr & pose_message){
	turtlesim_pose.x = pose_message->x;
	turtlesim_pose.y = pose_message->y;
	turtlesim_pose.theta = pose_message->theta;
}



-------------------------------------------------------------------------------------------

	Go to Goal location

-------------------------------------------------------------------------------------------

//------------------------addition to : robot_cleaner.cpp

//---- Note : Moving to a point (x*,y*) in 2D Plane.
//----------- Linear velocity v* = Kv sqrt((x*-x)^2 + (y*-y)^2)
//----------- Steering Angle  theta* = tan^-1 ((y1-y)/(x1-x))
//----------- Proprtional Controller ang_vel = Kh (theta*-theta), Kh>0  #---objective of this for angular velocity is to actually minimize thw diference between the current orientation of robot &  
//----------- 							        #---orientatiion towards the goal
//----------- 								#---turns the steering wheel towards the target


void moveGoal(turtlesim::Pose goal_pose, double distance_tolerance);
double getDistance(double x1, double y1, double x2, double y2);

turtlesim::Pose goal_pose;

int main(int argc, char **argv){
	...
	goal_pose.x = 1;
	goal_pose.y = 1;
	goal_pose.theta = 0;
	moveGoal(goal_pose,0.01);
	loop_rate.sleep();
	ros::spin();
	
	return 0;
}

void moveGoal(turtlesim::Pose goal_pose, double distance_tolerance){

	geometry_msgs::Twist vel_msg;
	ros::Rate loop_rate(10);
	
	do{
		vel_msg.linear.x = 1.5 * getDistance(turtlesim_pose.x, turtlesim_pose.y, goal_pose.x, goal_pose.y);
		vel_msg.linear.y = 0;
		vel_msg.linear.z = 0;
	
		vel_msg.angular.x = 0;
		vel_msg.angular.y = 0;
		vel_msg.angular.z = 4*(atan2(goal_pose.y-turtlesim_pose.y,goal_pose.x-turtlesim_pose.x)-turtlesim_pose.theta);

		velocity_publisher.publish(vel_msg);
		ros::spinOnce();
		loop_rate.sleep();
	
	}while(getDistance((turtlesim_pose.x, turtlesim_pose.y, goal_pose.x, goal_pose.y) > distance_tolerance);
	cout << "end move goal "<<endl;
	vel_msg.linear.x = 0;
	vel_msg.angular.z = 0;
	velocity_publisher.publish(vel_msg);
}

double getDistance(double x1, double y1, double x2, double y2){
	return sqrt(pow((x1,x2),2)+pow((y1,y2),2))
}

-------------------------------------------------------------------------------------------

	Spiral Control & Cleaning Application

-------------------------------------------------------------------------------------------

//------------------------addition to : robot_cleaner.cpp

void gridClean();
void spiralClean();

void gridClean(){

	ros::Rate loop(0.5);
	turtlesim::Pose pose;

	pose.x = 1;
	pose.y = 1;
	pose.theta = 0;
	moveGoal(pose,0.01);
	loop.seep();
	setDesiredOrientation(0);
	loop.sleep();

	move(2, 9, true);
	loop.sleep();
	rotate(degrees2radians(10), degrees2radians(90), false);
	loop.sleep();
	move(2, 9, true);
	loop.sleep();

	rotate(degrees2radians(10), degrees2radians(90), false);
	loop.sleep();
	move(2, 1, true);
	loop.sleep();
	rotate(degrees2radians(10), degrees2radians(90), false);
	loop.sleep();
	move(2, 9, true);
	loop.sleep();
	
	rotate(degrees2radians(10), degrees2radians(90), true);
	loop.sleep();
	move(2, 1, true);
	loop.sleep();
	rotate(degrees2radians(10), degrees2radians(90), true);
	loop.sleep();
	move(2, 9, true);
	loop.sleep();
	
}

void spiralClean(){

	geometry_msgs::Twist vel_msg;

	double count = 0;
	double constant_speed = 4;
	double vk = 1;
	double wk = 1;
	double rk = 1;
	ros::Rate loop(1);

	do{
		rk = rk+0.5;
		vel_msg.linear.x = rk;
		vel_msg.linear.y = 0;
		vel_msg.linear.z = 0;
	
		vel_msg.angular.x = 0;
		vel_msg.angular.y = 0;
		vel_msg.angular.z = constant_speed;

		velocity_publisher.publish(vel_msg);
		ros::spinOnce();
		loop_rate.sleep();
	
	}while(turtlesim_pose.x<10.5 && turtlesim_pose.y<10.5);
	vel_msg.linear.x = 0;
	vel_msg.angular.z = 0;
	velocity_publisher.publish(vel_msg);
}
